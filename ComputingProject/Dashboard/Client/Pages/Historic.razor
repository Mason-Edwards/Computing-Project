@page "/telemetryhistorical"
@using Dashboard.Client.Adapters;
@using Google.Protobuf.WellKnownTypes;
@using Microsoft.Fast.Components.FluentUI
@using Dashboard.Client.Components
@using Dashboard.Shared.GrpcProto
@using Grpc.Core
@using Dashboard.Client.Enums
@using Dashboard.Client.Services
@using Dashboard.Shared.Models
@using System.Text.Json;

@inject IJSRuntime JsRuntime
@inject TelemetryData.TelemetryDataClient TelemetryClient

<PageTitle>Live Telemetry</PageTitle>
<div class="telemetry-container">
    <ButtonBanner OnLoadDataClicked="LoadDataClicked"/>
    <TelemetryDashboard @ref="dashboard" />
    <ParameterList Connection="connection" Recording="recording" OnAddFakeDataLogs="AddFakeDataLogsClicked" OnClearFakeDataLogs="ClearFakeDataLogsClicked" OnAddFakeDataPoints="AddFakeDataPointsClicked"
       OnClearFakeDataPoints="ClearFakeDataPointsClicked" />
    <TelemetryLog @ref="log" />
</div>

@code {
    AsyncServerStreamingCall<Data>? stream;
    HashSet<string>? parameters = new HashSet<string>();

    TelemetryDashboard? dashboard;
    TelemetryLog? log;

    ConnectionStatus connection = ConnectionStatus.Disconnected;
    RecordingStatus recording = RecordingStatus.NotRecoding;

    // Need to clean this code. More consistent types etc. 
    // There is a bug when the stream is stopped and started again, nothing happens and it needs to be started/stopped multiple times for data to start going through
    // again.

    // Parameter names need to be fixed, where the parameter name and units are shown nicer.

    // gRPC needs to be removed from server side and its easier to just use it straight from the client.
    // CORS needs to be sorted properly.
    public async Task StartClicked()
    {
        try
        {
            using (stream = TelemetryClient.OpenTelemetryStream(new Empty()))
            {
                connection = ConnectionStatus.Connecting;
                StateHasChanged();
                await foreach(var response in stream.ResponseStream.ReadAllAsync())
                {
                    connection = ConnectionStatus.Connected;
                    StateHasChanged();
                    // gRPC server has already ensured the messages are in the right format.
                    Console.WriteLine($"Parameter: {response.Parameter} | Unit: {response.Unit} | Value: {response.Value} | Timestamp: {response.Timestamp}");

                    // Pass response to Chart Service to have it displayed.
                    Parameter p = new Parameter(response.Parameter + response.Unit, 1, "rgb(255, 0, 0)", "rgba(255, 0, 0, 1)");
                    DateTimeOffset time = DateTimeOffset.Parse(response.Timestamp);
                    ParameterData pd = new ParameterData(response.Value.ToString(), time.ToUnixTimeMilliseconds());

                    // Handle if its a log message
                    if (response.Unit.Equals("log"))
                    {

                        continue;
                    }

                    // Checking label isnt the best but itll work. Having a HashSet<Parameter> doesnt work with contains as it seems like its checking object references
                    // insead of the members of the object.
                    if (!parameters.Contains(p.Label))
                    {
                        parameters.Add(p.Label);
                        await ChartService.AddParameter(JsonSerializer.Serialize(p), JsRuntime);
                    }

                    // Unlike Parameter, ParameterData doesnt need to be serialised before its passsed into the JS function. This should be more consistent.
                    await ChartService.AddParameterData(p.Label ,pd, JsRuntime);
                }
                connection = ConnectionStatus.Disconnected;
            }
        } catch(Grpc.Core.RpcException ex) when (ex.StatusCode == StatusCode.Cancelled)
        {
            connection = ConnectionStatus.Disconnected;
            Console.WriteLine("Stream cancelled");
        }
        catch (Exception ex) { connection = ConnectionStatus.Disconnected; }
    }

    public void StopClicked()
    {
        connection = ConnectionStatus.Disconnected;
        stream?.Dispose();
    }

    public async Task StartRecordingClicked()
    {
        // TODO Dont allow recording if not connected
        recording = RecordingStatus.Recording;
        // Try catch, if exception then set recording status back
        await TelemetryClient.RecordTelemetryAsync(new RecordTelemetryMessage { RecordingStatus = RecordingStatusAdapter.ToGrpcRecordingStatus(recording) });
    }

    public async Task StopRecordingClicked()
    {
        // TODO Dont allow recording if not connected
        recording = RecordingStatus.NotRecoding;
        // Try catch, if exception then set recording status back
        await TelemetryClient.RecordTelemetryAsync(new RecordTelemetryMessage { RecordingStatus = RecordingStatusAdapter.ToGrpcRecordingStatus(recording) });
    }

    public void AddFakeDataLogsClicked()
    {
        log?.addFakeLogs();
    }

    public void ClearFakeDataLogsClicked()
    {
        log?.clearLogs();
    }

    public void AddFakeDataPointsClicked()
    {

        dashboard?.AddFakeDataPoints();
    }

    public void ClearFakeDataPointsClicked()
    {
        dashboard?.ClearDataPoints();
    }

    public async Task LoadDataClicked()
    {
        // Find out where this logic should live, doing here for now.
        var start = await JsRuntime.InvokeAsync<string>("GetStartDate");
        var end = await JsRuntime.InvokeAsync<string>("GetEndDate");

        var startParsed = DateTimeOffset.Parse(start);
        var startToUnix = startParsed.ToUnixTimeSeconds();

        var endParsed = DateTimeOffset.Parse(end);
        var endToUnix = endParsed.ToUnixTimeSeconds();

        //
        // Query data
        //
        LoadTelemetryDataReply data = await TelemetryClient.LoadTelemetryDataAsync(new LoadTelemetryDataRequest() { Start = startToUnix, End = endToUnix });

        for (int i = 0; i < data.DataList.Count; i++)
        {
            var test = data.DataList.ElementAt(i);
            if (!parameters.Contains(test.Parameter))
            {
                Parameter p = new Parameter($"{test.Parameter}", 1, "rgb(255, 0, 0)", "rgba(255, 0, 0, 1)");
                string pSerialised = JsonSerializer.Serialize(p);
                parameters.Add(test.Parameter);

                await JsRuntime.InvokeAsync<string>("addNewParameter", pSerialised);
            }

            ParameterData pd = new ParameterData(test.Value.ToString(), DateTimeOffset.Parse(test.Timestamp).ToUnixTimeMilliseconds());
            await JsRuntime.InvokeAsync<string>("addData", test.Parameter, pd);
        }
    }
}